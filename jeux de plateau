class map {
    constructor(x,y) {
        this.cells = new Array;
        this.x = x;
        this.y = y;
    }
    generateCells() {
        for (let i = 0; i < x; i++) {                
            for (let j = 0; j < y; j++) {
              this.cells[x][y] = new Cell();
            }
        }
        
    };
    placeFighters() {

       if(randomXY(this.cells).type == normalCell){
        Ken[randomXY(this.cells)];

    } 
       else if(Ken[randomXY(this.cells)] !== this.cells[this.x]){

            Ryu[randomXY(this.cells)];
       }
        
    
    };

    placeWeapons(number) {
        for (let i = 0; i < number; i++) {
            while (randomXY(this.cells).type == normalCell && randomXY(this.cells).type !== fireball && randomXY(this.cells).type !== axe || randomXY(this.cells).type !== sword || randomXY(this.cells).type !== gun ) {
                fireball[randomXY(this.cells)];     
                axe[randomXY(this.cells)];     
                sword[randomXY(this.cells)];  
                gun[randomXY(this.cells)];  
            }
           }
       };
    
    placeObstacleCells(number) {
        for (let i = 0; i < number; i++) {
            randomXY(this.cells).type = obstacleCell;
         while (randomXY(this.cells).type == obstacleCell) {
         }
         randomXY(this.cells).type = obstacleCell;
        }
    };
    //this.lightAccessibleCells(){};
    //this.printOnload(){};
    randomXY() {
        let randomX = Math.floor(Math.random()* this.cells.length);
        let randomY = Math.floor(Math.random()* this.cells[this.x].length);
        return randomX ,randomY;
    }
    
}
const mapGenerate = new map(10,10);



console.log(mapGenerate)
        //this.displayInfosOfGame(){};
    }
}

class Cell {
    constructor(type, cell, cellBlack, weapon, fighter, position, lightCell) {
        this.type = type;
        this.cell = cell;
        this.cellBlack = cellBlack;
        this.weapon = weapon;
        this.fighter = fighter;
        this.position = position;
        this.lightCell = lightCell;

    }
}
const cellEmpty = new Cell(empty, true, false, false, false, index, true);
const cellBlack = new Cell(full, true, true, false, false, index, false);
const lightCell = new Cell(empty, true, false, true, true, index, true);



class map {
    constructor(cells) {
        this.cells = cells;
        this.generatedRandomly = function (x, y) {
            for (let i = 0; i < x; i++) {
                for (let j = 0; j < y; j++) {
                    var cell = "<div class='cell'></div>";
                    $("#map").append(cell);
                
                }};
        this.generatedRandomly(10, 10);
        this.placeFighters = function (KenPlayer1, RyuPlayer2) {
            KenPlayer1 = "<div class='fighter' id = '1'></div>";
            RyuPlayer2 = "<div class='fighter' id= '2'></div>";
            $("#map").append(KenPlayer1, RyuPlayer2)
        };
        this.placeFighters(KenPlayer1, RyuPlayer2);
        this.placeWeapons = function (fireball, axe, sword, gun) {
            fireball = "<div class='weapons' id = '1'></div>";
            axe = "<div class='weapons' id= '2'></div>";
            sword = "<div class='weapons' id = '3'></div>";
            gun = "<div class='weapons' id= '4'></div>";
            $("#map").append(fireball, axe, sword, gun)
        };
        this.placeWeapons(fireball, axe, sword, gun)
        this.placeBlackCells = function (cellBlack) {
            for (let i = 0; i < 10; i++) {
                var cellBlack = "<div class='cellBlack'></div>";
                $("#map").append(cellBlack);

            }
        };
        this.placeBlackCells(cellBlack);
        //this.lightAccessibleCells(){};
        //this.printOnload(){};

    }
}
}

const mapGenerate = new map();
